{"name": "test_addenterprise02", "status": "broken", "statusDetails": {"message": "requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>", "trace": "header = ('Authorization', [])\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n>           if not pat.match(value):\nE           TypeError: expected string or bytes-like object\n\nvenv\\lib\\site-packages\\requests\\utils.py:946: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_enteripse.Testenterprise object at 0x048A91F0>\n\n    def test_addenterprise02(self):            #禁用子企业员工\n            case_data = get_test_data(self.excel_data,'forbenterprise')\n            updatetoken(self.token, case_data)\n            takeid = re.findall(r'http://api.etmprot.etmcn.com/basic/v2/employee/(.*)/status', case_data[\"url\"])\n            sumid = str(int(takeid[0]) + 1)\n            data = json.loads(case_data['data'])\n            id = {\"id\": sumid}\n            data.update(id)\n            case_data['data'] = json.dumps(data)\n            new_url = \"http://api.etmprot.etmcn.com/basic/v2/employee/\"+sumid+\"/status\"\n            case_data[\"url\"] = new_url\n>           res = send_request(case_data)\n\ntestcase\\test_enteripse.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommen\\send_request.py:34: in send_request\n    res = run_main(method, url, data, headers)\ncommen\\send_request.py:18: in run_main\n    res = requests.put(url=url, data=data, headers=json.loads(headers)).json()\nvenv\\lib\\site-packages\\requests\\api.py:134: in put\n    return request('put', url, data=data, **kwargs)\nvenv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nvenv\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nvenv\\lib\\site-packages\\requests\\models.py:315: in prepare\n    self.prepare_headers(headers)\nvenv\\lib\\site-packages\\requests\\models.py:449: in prepare_headers\n    check_header_validity(header)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nheader = ('Authorization', [])\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n            if not pat.match(value):\n                raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n        except TypeError:\n            raise InvalidHeader(\"Value for header {%s: %s} must be of type str or \"\n>                               \"bytes, not %s\" % (name, value, type(value)))\nE           requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>\n\nvenv\\lib\\site-packages\\requests\\utils.py:950: InvalidHeader"}, "start": 1600854497372, "stop": 1600854497373, "uuid": "ec10d758-7306-4e45-9aee-14cda523329e", "historyId": "69b77e1e2b065c30e0831512271cd278", "testCaseId": "f9e45cfd03207d886b1ca05048b0c97b", "fullName": "testcase.test_enteripse.Testenterprise#test_addenterprise02", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_enteripse"}, {"name": "subSuite", "value": "Testenterprise"}, {"name": "host", "value": "TX5C3S1L7D31UYD"}, {"name": "thread", "value": "21140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_enteripse"}]}