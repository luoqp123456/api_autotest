{
  "uid" : "d2aca74705516c83",
  "name" : "test_addenterprise01",
  "fullName" : "testcase.test_enteripse.Testenterprise#test_addenterprise01",
  "historyId" : "55e8f74e1962822065b2e910b7ef7eff",
  "time" : {
    "start" : 1600854497129,
    "stop" : 1600854497140,
    "duration" : 11
  },
  "description" : "组织架构，添加子企业与员工",
  "descriptionHtml" : "<p>组织架构，添加子企业与员工</p>\n",
  "status" : "broken",
  "statusMessage" : "requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>",
  "statusTrace" : "header = ('Authorization', [])\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n>           if not pat.match(value):\nE           TypeError: expected string or bytes-like object\n\nvenv\\lib\\site-packages\\requests\\utils.py:946: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_enteripse.Testenterprise object at 0x047C3490>\n\n    @allure.step(\"登录，组织架构中点击进行添加子企业\")\n    @allure.description(\"组织架构，添加子企业与员工\")\n    def test_addenterprise01(self):                #添加子企业与员工\n        case_data = get_test_data(self.excel_data, 'addenterprise')  # 从数据列表中查找到该用例数据\n        updatetoken(self.token, case_data)\n>       res = send_request(case_data)\n\ntestcase\\test_enteripse.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommen\\send_request.py:34: in send_request\n    res = run_main(method, url, data, headers)\ncommen\\send_request.py:16: in run_main\n    res = requests.post(url=url, data=data, headers=json.loads(headers)).json()\nvenv\\lib\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\nvenv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nvenv\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nvenv\\lib\\site-packages\\requests\\models.py:315: in prepare\n    self.prepare_headers(headers)\nvenv\\lib\\site-packages\\requests\\models.py:449: in prepare_headers\n    check_header_validity(header)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nheader = ('Authorization', [])\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n            if not pat.match(value):\n                raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n        except TypeError:\n            raise InvalidHeader(\"Value for header {%s: %s} must be of type str or \"\n>                               \"bytes, not %s\" % (name, value, type(value)))\nE           requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>\n\nvenv\\lib\\site-packages\\requests\\utils.py:950: InvalidHeader",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1600854497118,
      "stop" : 1600854497118,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "get_excel",
    "time" : {
      "start" : 1600854497126,
      "stop" : 1600854497126,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "do_login",
    "time" : {
      "start" : 1600854496843,
      "stop" : 1600854497118,
      "duration" : 275
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "addoption_env",
    "time" : {
      "start" : 1600854497118,
      "stop" : 1600854497118,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "env",
    "time" : {
      "start" : 1600854497118,
      "stop" : 1600854497126,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "组织架构，添加子企业与员工",
    "status" : "broken",
    "statusMessage" : "requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>",
    "statusTrace" : "header = ('Authorization', [])\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n>           if not pat.match(value):\nE           TypeError: expected string or bytes-like object\n\nvenv\\lib\\site-packages\\requests\\utils.py:946: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_enteripse.Testenterprise object at 0x047C3490>\n\n    @allure.step(\"登录，组织架构中点击进行添加子企业\")\n    @allure.description(\"组织架构，添加子企业与员工\")\n    def test_addenterprise01(self):                #添加子企业与员工\n        case_data = get_test_data(self.excel_data, 'addenterprise')  # 从数据列表中查找到该用例数据\n        updatetoken(self.token, case_data)\n>       res = send_request(case_data)\n\ntestcase\\test_enteripse.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommen\\send_request.py:34: in send_request\n    res = run_main(method, url, data, headers)\ncommen\\send_request.py:16: in run_main\n    res = requests.post(url=url, data=data, headers=json.loads(headers)).json()\nvenv\\lib\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\nvenv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nvenv\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nvenv\\lib\\site-packages\\requests\\models.py:315: in prepare\n    self.prepare_headers(headers)\nvenv\\lib\\site-packages\\requests\\models.py:449: in prepare_headers\n    check_header_validity(header)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nheader = ('Authorization', [])\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n            if not pat.match(value):\n                raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n        except TypeError:\n            raise InvalidHeader(\"Value for header {%s: %s} must be of type str or \"\n>                               \"bytes, not %s\" % (name, value, type(value)))\nE           requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>\n\nvenv\\lib\\site-packages\\requests\\utils.py:950: InvalidHeader",
    "steps" : [ {
      "name" : "登录，组织架构中点击进行添加子企业",
      "time" : {
        "start" : 1600854497129,
        "stop" : 1600854497130,
        "duration" : 1
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.InvalidHeader: Value for header {Authorization: []} must be of type str or bytes, not <class 'list'>\n",
      "statusTrace" : "  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\testcase\\test_enteripse.py\", line 22, in test_addenterprise01\n    res = send_request(case_data)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\commen\\send_request.py\", line 34, in send_request\n    res = run_main(method, url, data, headers)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\commen\\send_request.py\", line 16, in run_main\n    res = requests.post(url=url, data=data, headers=json.loads(headers)).json()\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\api.py\", line 119, in post\n    return request('post', url, data=data, json=json, **kwargs)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\api.py\", line 61, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\sessions.py\", line 516, in request\n    prep = self.prepare_request(req)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\sessions.py\", line 459, in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\models.py\", line 315, in prepare\n    self.prepare_headers(headers)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\models.py\", line 449, in prepare_headers\n    check_header_validity(header)\n  File \"C:\\Users\\Administrator\\PycharmProjects\\pytest\\venv\\lib\\site-packages\\requests\\utils.py\", line 950, in check_header_validity\n    \"bytes, not %s\" % (name, value, type(value)))\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_enteripse"
  }, {
    "name" : "subSuite",
    "value" : "Testenterprise"
  }, {
    "name" : "host",
    "value" : "TX5C3S1L7D31UYD"
  }, {
    "name" : "thread",
    "value" : "21140-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_enteripse"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "d2aca74705516c83.json",
  "parameterValues" : [ ]
}